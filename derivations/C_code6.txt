float nextP[6][6];
nextP[0][0] = P[0][0];
nextP[0][1] = P[0][1];
nextP[1][1] = P[1][1];
nextP[0][2] = P[0][2];
nextP[1][2] = P[1][2];
nextP[2][2] = P[2][2];
nextP[0][3] = P[0][3] + P[0][0]*dt;
nextP[1][3] = P[1][3] + P[1][0]*dt;
nextP[2][3] = P[2][3] + P[2][0]*dt;
nextP[3][3] = P[3][3] + P[0][3]*dt + dt*(P[3][0] + P[0][0]*dt);
nextP[0][4] = P[0][4] + P[0][1]*dt;
nextP[1][4] = P[1][4] + P[1][1]*dt;
nextP[2][4] = P[2][4] + P[2][1]*dt;
nextP[3][4] = P[3][4] + P[0][4]*dt + dt*(P[3][1] + P[0][1]*dt);
nextP[4][4] = P[4][4] + P[1][4]*dt + dt*(P[4][1] + P[1][1]*dt);
nextP[0][5] = P[0][2]*dt;
nextP[1][5] = P[1][2]*dt;
nextP[2][5] = P[2][2]*dt;
nextP[3][5] = dt*(P[3][2] + P[0][2]*dt);
nextP[4][5] = dt*(P[4][2] + P[1][2]*dt);
nextP[5][5] = P[2][2]*sq(dt);
float SH_RNG[1][1];
SH_RNG[0] = 1/(sqrt(sq(bcn_pos_d + deck_pos_d - veh_pos_d) + sq(bcn_pos_e + deck_pos_e - veh_pos_e) + sq(bcn_pos_n + deck_pos_n - veh_pos_n)));
float H_RNG[1][6];
H_RNG[0][3] = (SH_RNG[0]*(2*bcn_pos_n + 2*deck_pos_n - 2*veh_pos_n))/2;
H_RNG[0][4] = (SH_RNG[0]*(2*bcn_pos_e + 2*deck_pos_e - 2*veh_pos_e))/2;
H_RNG[0][5] = (SH_RNG[0]*(2*bcn_pos_d + 2*deck_pos_d - 2*veh_pos_d))/2;
float SK_RNG[5][1];
SK_RNG[0] = 1/(R_RNG + (SH_RNG[0]*((P[4][4]*SH_RNG[0]*(2*bcn_pos_e + 2*deck_pos_e - 2*veh_pos_e))/2 + (P[5][4]*SH_RNG[0]*(2*bcn_pos_d + 2*deck_pos_d - 2*veh_pos_d))/2 + (P[3][4]*SH_RNG[0]*(2*bcn_pos_n + 2*deck_pos_n - 2*veh_pos_n))/2)*(2*bcn_pos_e + 2*deck_pos_e - 2*veh_pos_e))/2 + (SH_RNG[0]*((P[4][5]*SH_RNG[0]*(2*bcn_pos_e + 2*deck_pos_e - 2*veh_pos_e))/2 + (P[5][5]*SH_RNG[0]*(2*bcn_pos_d + 2*deck_pos_d - 2*veh_pos_d))/2 + (P[3][5]*SH_RNG[0]*(2*bcn_pos_n + 2*deck_pos_n - 2*veh_pos_n))/2)*(2*bcn_pos_d + 2*deck_pos_d - 2*veh_pos_d))/2 + (SH_RNG[0]*((P[4][3]*SH_RNG[0]*(2*bcn_pos_e + 2*deck_pos_e - 2*veh_pos_e))/2 + (P[5][3]*SH_RNG[0]*(2*bcn_pos_d + 2*deck_pos_d - 2*veh_pos_d))/2 + (P[3][3]*SH_RNG[0]*(2*bcn_pos_n + 2*deck_pos_n - 2*veh_pos_n))/2)*(2*bcn_pos_n + 2*deck_pos_n - 2*veh_pos_n))/2);
SK_RNG[1] = 2*bcn_pos_n + 2*deck_pos_n - 2*veh_pos_n;
SK_RNG[2] = 2*bcn_pos_e + 2*deck_pos_e - 2*veh_pos_e;
SK_RNG[3] = 2*bcn_pos_d + 2*deck_pos_d - 2*veh_pos_d;
SK_RNG[4] = SH_RNG[0];
float Kfusion[6][1];
float Kfusion[1][1];
Kfusion[0] = SK_RNG[0]*((P[0][3]*SK_RNG[1]*SK_RNG[4])/2 + (P[0][4]*SK_RNG[2]*SK_RNG[4])/2 + (P[0][5]*SK_RNG[3]*SK_RNG[4])/2);
Kfusion[1] = SK_RNG[0]*((P[1][3]*SK_RNG[1]*SK_RNG[4])/2 + (P[1][4]*SK_RNG[2]*SK_RNG[4])/2 + (P[1][5]*SK_RNG[3]*SK_RNG[4])/2);
Kfusion[2] = SK_RNG[0]*((P[2][3]*SK_RNG[1]*SK_RNG[4])/2 + (P[2][4]*SK_RNG[2]*SK_RNG[4])/2 + (P[2][5]*SK_RNG[3]*SK_RNG[4])/2);
Kfusion[3] = SK_RNG[0]*((P[3][3]*SK_RNG[1]*SK_RNG[4])/2 + (P[3][4]*SK_RNG[2]*SK_RNG[4])/2 + (P[3][5]*SK_RNG[3]*SK_RNG[4])/2);
Kfusion[4] = SK_RNG[0]*((P[4][3]*SK_RNG[1]*SK_RNG[4])/2 + (P[4][4]*SK_RNG[2]*SK_RNG[4])/2 + (P[4][5]*SK_RNG[3]*SK_RNG[4])/2);
Kfusion[5] = SK_RNG[0]*((P[5][3]*SK_RNG[1]*SK_RNG[4])/2 + (P[5][4]*SK_RNG[2]*SK_RNG[4])/2 + (P[5][5]*SK_RNG[3]*SK_RNG[4])/2);
float SH_RNG2[1][1];
SH_RNG2[0] = 1/((sq(qd0) - sq(qd1) - sq(qd2) + sq(qd3))*(sq(qv0) - sq(qv1) - sq(qv2) + sq(qv3)) + (2*qd0*qd1 - 2*qd2*qd3)*(2*qv0*qv1 - 2*qv2*qv3) + (2*qd0*qd2 + 2*qd1*qd3)*(2*qv0*qv2 + 2*qv1*qv3));
float H_RNG2[1][6];
H_RNG2[0][3] = SH_RNG2[0]*(2*qd0*qd2 + 2*qd1*qd3);
H_RNG2[0][4] = -SH_RNG2[0]*(2*qd0*qd1 - 2*qd2*qd3);
H_RNG2[0][5] = SH_RNG2[0]*(sq(qd0) - sq(qd1) - sq(qd2) + sq(qd3));
float SK_RNG2[5][1];
SK_RNG2[0] = 1/(R_LASER + SH_RNG2[0]*(2*qd0*qd2 + 2*qd1*qd3)*(P[5][3]*SH_RNG2[0]*(sq(qd0) - sq(qd1) - sq(qd2) + sq(qd3)) + P[3][3]*SH_RNG2[0]*(2*qd0*qd2 + 2*qd1*qd3) - P[4][3]*SH_RNG2[0]*(2*qd0*qd1 - 2*qd2*qd3)) - SH_RNG2[0]*(2*qd0*qd1 - 2*qd2*qd3)*(P[5][4]*SH_RNG2[0]*(sq(qd0) - sq(qd1) - sq(qd2) + sq(qd3)) + P[3][4]*SH_RNG2[0]*(2*qd0*qd2 + 2*qd1*qd3) - P[4][4]*SH_RNG2[0]*(2*qd0*qd1 - 2*qd2*qd3)) + SH_RNG2[0]*(P[5][5]*SH_RNG2[0]*(sq(qd0) - sq(qd1) - sq(qd2) + sq(qd3)) + P[3][5]*SH_RNG2[0]*(2*qd0*qd2 + 2*qd1*qd3) - P[4][5]*SH_RNG2[0]*(2*qd0*qd1 - 2*qd2*qd3))*(sq(qd0) - sq(qd1) - sq(qd2) + sq(qd3)));
SK_RNG2[1] = sq(qd0) - sq(qd1) - sq(qd2) + sq(qd3);
SK_RNG2[2] = 2*qd0*qd1 - 2*qd2*qd3;
SK_RNG2[3] = 2*qd0*qd2 + 2*qd1*qd3;
SK_RNG2[4] = SH_RNG2[0];
float Kfusion[6][1];
float Kfusion[1][1];
Kfusion[0] = SK_RNG2[0]*(P[0][3]*SK_RNG2[3]*SK_RNG2[4] - P[0][4]*SK_RNG2[2]*SK_RNG2[4] + P[0][5]*SK_RNG2[1]*SK_RNG2[4]);
Kfusion[1] = SK_RNG2[0]*(P[1][3]*SK_RNG2[3]*SK_RNG2[4] - P[1][4]*SK_RNG2[2]*SK_RNG2[4] + P[1][5]*SK_RNG2[1]*SK_RNG2[4]);
Kfusion[2] = SK_RNG2[0]*(P[2][3]*SK_RNG2[3]*SK_RNG2[4] - P[2][4]*SK_RNG2[2]*SK_RNG2[4] + P[2][5]*SK_RNG2[1]*SK_RNG2[4]);
Kfusion[3] = SK_RNG2[0]*(P[3][3]*SK_RNG2[3]*SK_RNG2[4] - P[3][4]*SK_RNG2[2]*SK_RNG2[4] + P[3][5]*SK_RNG2[1]*SK_RNG2[4]);
Kfusion[4] = SK_RNG2[0]*(P[4][3]*SK_RNG2[3]*SK_RNG2[4] - P[4][4]*SK_RNG2[2]*SK_RNG2[4] + P[4][5]*SK_RNG2[1]*SK_RNG2[4]);
Kfusion[5] = SK_RNG2[0]*(P[5][3]*SK_RNG2[3]*SK_RNG2[4] - P[5][4]*SK_RNG2[2]*SK_RNG2[4] + P[5][5]*SK_RNG2[1]*SK_RNG2[4]);
float rng_laser[1][1];
rng_laser[0] = ((deck_pos_d - veh_pos_d)*(sq(qd0) - sq(qd1) - sq(qd2) + sq(qd3)) - (deck_pos_e - veh_pos_e)*(2*qd0*qd1 - 2*qd2*qd3) + (deck_pos_n - veh_pos_n)*(2*qd0*qd2 + 2*qd1*qd3))/((sq(qd0) - sq(qd1) - sq(qd2) + sq(qd3))*(sq(qv0) - sq(qv1) - sq(qv2) + sq(qv3)) + (2*qd0*qd1 - 2*qd2*qd3)*(2*qv0*qv1 - 2*qv2*qv3) + (2*qd0*qd2 + 2*qd1*qd3)*(2*qv0*qv2 + 2*qv1*qv3));
